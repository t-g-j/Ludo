#ifndef LUDO_PLAYER_Q_H
#define LUDO_PLAYER_Q_H

#include <QObject>
#include <iostream>
#include "positions_and_dice.h"
#include <stdlib.h>

class ludo_player_q : public QObject {
    Q_OBJECT
private:
    std::vector<int> pos_start_of_turn;
    std::vector<int> pos_end_of_turn;
    int dice_roll;
    int make_decision();

    int calcTokenToMove();

    int maxQ(int state);

    int counter = 0;
    void updateStateArray();
    void clearStateArray();
    int stateArray[4] = {0,0,0,0};

    void updateActionArray();
    void clearActionArray();

    int estimateNextState(int token);

    float rate = 0.8;
    float a = 0.3;  //0.8 og 0.3 = 58%+
    int oldMove[4][3] = {{0,0,0},{0,0,0},{0,0,0},{0,0,0}};
    bool hasMoved[4] = {0,0,0,0};
    int actionArray[4][11] = {{0,0,0,0,0,0,0,0,0,0,0},
                              {0,0,0,0,0,0,0,0,0,0,0},
                              {0,0,0,0,0,0,0,0,0,0,0},
                              {0,0,0,0,0,0,0,0,0,0,0}};
/*
    float q[7][11] = {{49.5981,0,0,0,0,0,0,0,0,0,-1.3},
                    {0,197.902,12.1233,31.3932,189.812,11.5276,48.3324,24.5621,30.0304,20.6168,0},
                    {0,195.509,18.029,31.4243,197.992,17.6874,55.1491,2.1486,28.9567,40.2133,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,197.997,0,0,0,0,54.9937,55.3389,53.6452,52.6392,0},
                    {0,195.749,33.8193,11.9056,153.59,4.90463,29.9821,4.20344,11.8583,3.78396,0},
                    {0,123.498,28.1728,43.5418,113.497,6.8573,54.6788,4.6489,11.2915,26.564,0}};

    float q[7][11] = {{200,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,91.9,0,0,0,115.1,0,0,-8.1,81.9,0},
                    {0,91.9,112.7,168.5,139.5,126,81.9,112.5,125.1,135.9,0},
                    {-10,91.9,135.9,155.9,139.5,151.2,81.9,135.9,143.1,135.9,0}};
*/
    float q[7][11] ={{56.4923,0,0,0,0,0,0,0,0,0,0},
                     {0,0,0.923081,5.53846,0.921327,1.47692,1.65959,0.923077,0.923077,1.38462,0},
                     {0,-1.66154,0.923077,0.925021,0.923077,1.47692,1.66154,0.923077,0.923252,1.09662,0},
                     {0,0,0,0,0,0,0,0,0,0,0},
                     {0,9.87692,0,0,0,-0.830769,0,0,-2.66192,-2.65846,0},
                     {0,8.988,0.923077,5.54041,0.923077,1.47692,1.66136,0.922494,0.923077,0.923077,0},
                     {0,0,0.923077,5.53846,0.923077,1.47692,1.66154,0.923077,0.923077,0.923083,0}}; //55% 0.8 0.3

/*
    float q[7][11] = {{0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0}};
*/
    float r[7][11] = {{200,-10,-10,-10,-10,-10,-10,-10,-10,-10,-2},
                      {-10,0,0,20,0,0,0,0,0,2,-10},
                      {-10,0,0,0,0,0,0,0,0,2,-10},
                      {-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10},
                      {-10,50,-10,-10,-10,-10,0,0,0,0,-10},
                      {-10,50,0,20,0,0,0,0,0,0,-10},
                      {-10,100,0,20,0,0,0,0,0,0,-10}};
public:
    ludo_player_q();
    void printQ();
    void printQReadable();
signals:
    void select_piece(int);
    void turn_complete(bool);
public slots:
    void start_turn(positions_and_dice relative);
    //void endGame(int player);
    void post_game_analysis(std::vector<int> relative_pos);
};

#endif // LUDO_PLAYER_Q_H


/*
        std::cout << "---------- Action Array Matrix ----- Token " << move[0] << " ----------" << std::endl;
        for(int row = 0; row < 4; row++)
        {
            for(int col = 0; col < 11; col++)
            {
                std::cout << actionArray[row][col] << "\t";
            }
            std::cout << stateArray[row] << "\t" << pos_start_of_turn[row] << std::endl;
        }
*/
